var documenterSearchIndex = {"docs":
[{"location":"#Clines","page":"Clines","title":"Clines","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"A cline is a circle or a line in the plane. ","category":"page"},{"location":"#Construction","page":"Clines","title":"Construction","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"A cline is specified by three points in the plane represented by complex numbers. If the three points are collinear, then a line is created. Otherwise, there is a unique circle containing those three points and that is what is returned.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"julia> using Clines\n\njulia> Cline(2-im, 3im, 1-im)\nCircle(1.5, 1.25, 2.3048861143232218)\n\njulia> L = Cline(0, 1+im, -1-im)\nLine(1.0 + 1.0im, -1.0 - 1.0im)","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Notes","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"If two of the arguments to Cline are equal, then a Line is created through the two distince points. \nIf one of the arguments to Cline is infinite, a Line is created through the two (finite) points. \nNote that the Clines module defines two data types: Circle and Line, and these are subtypes of the abstract type Cline.\nA Circle can be directly constructed by specifying a center z and a radius r like this: Circle(z,r).\nA Line can be directly constructed by specifying two points w and z like this: Line(w,z). ","category":"page"},{"location":"#Inspection","page":"Clines","title":"Inspection","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"For any cline C, the function three_points(C) returns a list of three complex numbers that are distinct points on C. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"In the case of a circle, the three points are equally spaced around the circle at 0, 120, and 240 degrees starting from the far right. \nFor a line, the three points are the two points used to define the line and their midpoint. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"For a circle C, we have the following:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"center(C) returns the center of the circle as a complex number.\nradius(C) returns the radius of the circle. \narea(C) returns the area of the circle.\ncircumference(C) returns the circumference.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"For a line L, we have the following:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"slope(L) returns the slope of the line (possibly Inf).\ndilate(L,factor=2) creates a new Line object that is equal to L but whose defining points are further apart by a factor of factor.  ","category":"page"},{"location":"#Pairs","page":"Clines","title":"Pairs","text":"","category":"section"},{"location":"#Intersection","page":"Clines","title":"Intersection","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Given two clines C and D use intersect(C,D) or C ∩ D to return a set of points that are common to the two clines. This set may have zero, one, or two elements. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"julia> C = Circle(0im, 1)\nCircle(0.0, 0.0, 1.0)\n\njulia> D = Circle(0.5im,1)\nCircle(0.0, 0.5, 1.0)\n\njulia> C ∩ D\nSet{ComplexF64} with 2 elements:\n  -0.9682458365518543 + 0.25im\n  0.9682458365518543 + 0.25im","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Note: If the two clines are equal, a warning is issued and the emptyset it returned. ","category":"page"},{"location":"#Angle","page":"Clines","title":"Angle","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"For two clines, angle(C,D) computes the angle of intersection in the range [0,π/2]. If the clines do not intersect, an error is thrown. Note that parallel lines are considered to intersect at infinity and their angle is reported as 0.","category":"page"},{"location":"#Containment","page":"Clines","title":"Containment","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"For a point z and a cline C, use in(z,C) or z ∈ C to test of if z lies on C.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"julia> C = Circle(0im,1)\nCircle(0.0, 0.0, 1.0)\n\njulia> z = 0.6 + 0.8im\n0.6 + 0.8im\n\njulia> z ∈ C\ntrue","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"For two circles C and D, use issubset(C,D) or C ⊆ D to test if the circle C is contained inside circle D. ","category":"page"},{"location":"#Linear-Fractional-(Möbius)-Transformations","page":"Clines","title":"Linear Fractional (Möbius) Transformations","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Clines can be used to define and to be transformed by Linear Fractional Transformations.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"If F is a linear fractional transformation, then F(C) is the result of applying F to the cline C.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Given a cline C, calling LFT(C) returns a linear fractional transformation that maps C to the x-axis.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Given two clines C and D, calling LFT(C,D) returns a linear fractional transformation that maps C to D.","category":"page"},{"location":"#Inversion","page":"Clines","title":"Inversion","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"To find the inversion of a point or a cline through another cline, use inv:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"inv(C,z) finds the image of the point z by inversion through C.\ninv(C,D) finds the image of cline D by inversion through C.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Calling inv(C) returns a function F with the property that F(x) gives inv(C,x).","category":"page"},{"location":"#Visualization","page":"Clines","title":"Visualization","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"The function draw will draw a Cline on the screen using SimpleDrawing in conjunction with  Plots.","category":"page"},{"location":"#Drawing-circles","page":"Clines","title":"Drawing circles","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"julia> using SimpleDrawing, Plots\n\njulia> C = Circle(0,0,1)\nCircle(0.0, 0.0, 1.0)\n\njulia> D = Circle(0.25,.5,1.25)\nCircle(0.25, 0.5, 1.25)\n\njulia> E = Circle(.2,.2,.5)\nCircle(0.2, 0.2, 0.5)\n\njulia> newdraw(); draw(C); draw(D,linecolor=:red); draw(E,fill=true,color=:yellow)","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Here is the result:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"(Image: )","category":"page"},{"location":"#Drawing-lines","page":"Clines","title":"Drawing lines","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Since lines are infinite, drawing them presents a challenge. For a line L, calling draw(L) will draw L in the current graphics window as a line segment with arrows on each end. However, if the line does not overlap the current window, nothing is drawn. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"This is illustrated in the following two examples. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"In this first example, we draw a circle of radius 1 and then three lines. One of the lines (slated to be blue) lies outside the frame so it is not drawn. We then add a circle of radius 2.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"newdraw()\ndraw(Circle(0, 0, 1), color = :black, style = :dash)\ndraw(Line(0, 0, 1, 2), color = :green)\ndraw(Line(-5, 0.5, 2, 1), color = :red)\ndraw(Line(-5, 1.5, 5, 1.5), color = :blue)\ndraw(Circle(0, 0, 2), color = :black, style = :dash)","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Here is the result:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"(Image: )","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"However, in this second example, we draw the big circle first (causing the plotting area to be larger) and then draw the lines and the smaller circle.  The window is large enough for the blue line appears.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"newdraw()\ndraw(Circle(0, 0, 2), color = :black, style = :dash)\ndraw(Line(0, 0, 1, 2), color = :green)\ndraw(Line(-5, 0.5, 2, 1), color = :red)\ndraw(Line(-5, 1.5, 5, 1.5), color = :blue)\ndraw(Circle(0, 0, 1), color = :black, style = :dash)","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"As shown in the figure, the blue line is now present.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"(Image: )","category":"page"},{"location":"#Forced-line-drawing","page":"Clines","title":"Forced line drawing","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Because lines outside the frame of the window do not appear, we provide the function force_draw. This draws the line as a double-arrowed segment joining the two points that define the line. ","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"newdraw()\ndraw(Circle(0, 0, 1), color = :black, style = :dash)\ndraw(Line(-5, 0.5, 2, 1), color = :red)\ndraw(Line(0, 0, 1, 2), color = :green)\nforce_draw(Line(-5, 1.5, 5, 1.5), color = :blue)\ndraw(Circle(0, 0, 2), color = :black, style = :dash)","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Here is the result:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"(Image: )","category":"page"},{"location":"#Roundoff-Problems","page":"Clines","title":"Roundoff Problems","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Most of the operations in this module subject to roundoff errors. For example, to test if a point z lies on a circle C we would compute the distance from z to the center of C and check if that equals the radius. However, because of roundoff errors, a strict test for equality may yield false when mathematically the result should be true.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"We provide the following funtions for dealing with roundoff errors:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"set_tolerance(tol) sets the tolerance for roundoff errors to tol. Without an argument, we set the tolerance to the module's default value.\nget_tolerance() returns the current tolerance setting.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"For example:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"julia> C = Circle(0,0,sqrt(2));   # circle of radius sqrt(2)\n\njulia> z = sqrt(2) * exp(im);     # mathematically, this is a point on C\n\njulia> z ∈ C                      # success\ntrue\n\njulia> set_tolerance(1e-100)      # make tolerance unreasonably small\n1.0e-100\n\njulia> z ∈ C                      # test fails\nfalse","category":"page"},{"location":"#Kissing-Circles","page":"Clines","title":"Kissing Circles","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"Given three (noncollinear) points a, b, and c, the function kiss(a,b,c) returns a list of three circles whose centers are a, b, and c that are pairwise tangent.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Then, given three mutually tangent circles, the function soddy returns a circle that is tangent to all three and nestled in the space between them.","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"julia> CC = kiss(-1,2im,1-im)\n3-element Vector{Circle}:\n Circle(-1.0, 0.0, 0.6549291474156)\n Circle(0.0, 2.0, 1.5811388300841898)\n Circle(1.0, -1.0, 1.5811388300841898)\n\njulia> S = soddy(CC...)\nCircle(-0.21638837510877562, 0.26120387496374137, 0.17107003113165417)\n\njulia> newdraw(); draw.(CC); draw(S,fill=true,color=:red); finish()","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"Here is the result:","category":"page"},{"location":"","page":"Clines","title":"Clines","text":"(Image: )","category":"page"},{"location":"#Other","page":"Clines","title":"Other","text":"","category":"section"},{"location":"","page":"Clines","title":"Clines","text":"collinear(a,b,c) determines if the points specified by the three complex numbers are collinear. ","category":"page"}]
}
